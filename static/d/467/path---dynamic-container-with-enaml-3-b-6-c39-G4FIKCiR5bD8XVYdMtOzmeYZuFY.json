{"data":{"markdownRemark":{"html":"<br>\n<p>There are numerous ways to build applications, especially in today's time, as there are plentiful libraries and tools available on the web. To name a few, we can use django, pyramid, and even flask for simpler apps. This article focuses on building desktop apps with Enaml. Enaml is a library to build desktop apps with minimal effort. You might ask why? Why in this day and age would you ever build a desktop app? Hey why not, every project has its requirements and constrainsts.</p>\n<p>Here is what we need installed on the computer:</p>\n<ul>\n<li>Miniconda and a conda environment</li>\n<li>latest version of python</li>\n<li>pandas</li>\n</ul>\n<br>\n<h2>Installing enaml</h2>\n<p>Enaml can be installed using <code class=\"language-text\">conda</code> with an easy command.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> conda <span class=\"token function\">install</span> enaml\n\nThe following packages will be downloaded:\n\n    package                    <span class=\"token operator\">|</span>            build\n    ---------------------------<span class=\"token operator\">|</span>-----------------\n    python.app-2               <span class=\"token operator\">|</span>           py36_9         1.3 MB\n    certifi-2018.8.24          <span class=\"token operator\">|</span>           py36_1         139 KB\n    atom-0.4.1                 <span class=\"token operator\">|</span>   py36h0a44026_0         107 KB\n    openssl-1.0.2p             <span class=\"token operator\">|</span>       h1de35cc_0         3.4 MB\n    ply-3.11                   <span class=\"token operator\">|</span>           py36_0          79 KB\n    qtpy-1.5.1                 <span class=\"token operator\">|</span>           py36_0          53 KB\n    kiwisolver-1.0.1           <span class=\"token operator\">|</span>   py36h0a44026_0          56 KB\n    future-0.16.0              <span class=\"token operator\">|</span>           py36_2         668 KB\n    enaml-0.10.2               <span class=\"token operator\">|</span>   py36h0a44026_0         961 KB\n    ------------------------------------------------------------\n                                           Total:         6.7 MB</code></pre>\n      </div>\n<p>Congrats! You now have enmal installed on your conda environment.</p>\n<br>\n<h2>Folder Structure</h2>\n<p>First create a new folder. And then add initial files using <code class=\"language-text\">touch</code> and <code class=\"language-text\">mkdir</code> commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">mkdir</span> dyn_container_enaml\n<span class=\"token operator\">></span> <span class=\"token function\">cd</span> dyn_container_enaml\n<span class=\"token operator\">></span> <span class=\"token function\">touch</span> main.py\n<span class=\"token punctuation\">..</span>.</code></pre>\n      </div>\n<p>After completion, the folder structure would looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> tree dyn_container_enaml/\ndyn_container_enaml/\n├── main.py\n└── src/\n    ├── app_layout.enaml\n    ├── app_model.py\n    ├── container_one/\n    │   ├── container_one_layout.enaml\n    │   └── container_one_model.py\n    └── container_two/\n        ├── container_two_layout.enaml\n        └── container_two_model.py\n\n3 directories, 7 files</code></pre>\n      </div>\n<p>*Note <code class=\"language-text\">tree</code> is a bash command which can be installed using homebrew package for mac os.\n<code class=\"language-text\">brew install tree</code></p>\n<br>\n<h2>Hello, Enaml!</h2>\n<p>The code in these files is where python will spin off the enaml application.\nSo lets get started with some coding!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># main.py</span>\n\n<span class=\"token keyword\">import</span> enaml\n<span class=\"token keyword\">import</span> traceback\n<span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>app_model <span class=\"token keyword\">import</span> AppMain\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>qt<span class=\"token punctuation\">.</span>qt_application <span class=\"token keyword\">import</span> QtApplication\n\n<span class=\"token comment\"># enaml.imports is a gateway to import enaml files as they</span>\n<span class=\"token comment\"># are not part of python. Enaml is a superset of python.</span>\n<span class=\"token keyword\">with</span> enaml<span class=\"token punctuation\">.</span>imports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>app_layout <span class=\"token keyword\">import</span> App\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># create a Qt application</span>\n    app <span class=\"token operator\">=</span> QtApplication<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># define a new view for enaml object</span>\n    view <span class=\"token operator\">=</span> App\n\n    <span class=\"token comment\"># set the attribute of enaml object to a python object</span>\n    App<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> AppMain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># initialize the enaml view and call show</span>\n    view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># then start the Qt Application</span>\n    app<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_layout.enaml</span>\n\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>widgets<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Window<span class=\"token punctuation\">,</span> Container<span class=\"token punctuation\">,</span> Label\n\n<span class=\"token comment\"># create a new enaml Window object</span>\nenamldef App<span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># create an attribute model which gets set in main.py</span>\n    <span class=\"token comment\"># Note: the model can also be instantiated here after</span>\n    <span class=\"token comment\"># import of the python object.</span>\n    attr model\n    <span class=\"token comment\"># attr model = AppMain() # import app_model</span>\n    \n    <span class=\"token comment\"># container has a label with the message</span>\n    Container<span class=\"token punctuation\">:</span>\n        Label<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, Enaml!\"</span></code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_model.py</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppMain</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre>\n      </div>\n<p>Here is what the output of the app looks like thus far!\n![Hello Enaml](../static/hello_enaml-672d77c5a00a2edc9d74e253e487cd78.png =100x)</p>","frontmatter":{"title":"Building an Enaml App with Dynamic Containers","tags":"enaml, python, dynamic containers, desktop app"}}},"pageContext":{"slug":"/dynamic_container_with_enaml/"}}