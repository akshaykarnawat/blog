{"data":{"markdownRemark":{"html":"<br>\n<p>There are numerous ways to build applications, especially in today's time, as there are plentiful libraries and tools available on the web. To name a few, we can use django, pyramid, and even flask for simpler apps. This article focuses on building desktop apps with Enaml. Enaml is a library to build desktop apps with minimal effort. You might ask why? Why in this day and age would you ever build a desktop app? Hey why not, every project has its requirements and constrainsts.</p>\n<p>Here is what we need installed on the computer:</p>\n<ul>\n<li>Miniconda and a conda environment</li>\n<li>latest version of python</li>\n<li>pandas</li>\n</ul>\n<br>\n<h2>Installing enaml</h2>\n<p>Enaml can be installed using <code class=\"language-text\">conda</code> with an easy command.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> conda <span class=\"token function\">install</span> enaml\n\nThe following packages will be downloaded:\n\n    package                    <span class=\"token operator\">|</span>            build\n    ---------------------------<span class=\"token operator\">|</span>-----------------\n    python.app-2               <span class=\"token operator\">|</span>           py36_9         1.3 MB\n    certifi-2018.8.24          <span class=\"token operator\">|</span>           py36_1         139 KB\n    atom-0.4.1                 <span class=\"token operator\">|</span>   py36h0a44026_0         107 KB\n    openssl-1.0.2p             <span class=\"token operator\">|</span>       h1de35cc_0         3.4 MB\n    ply-3.11                   <span class=\"token operator\">|</span>           py36_0          79 KB\n    qtpy-1.5.1                 <span class=\"token operator\">|</span>           py36_0          53 KB\n    kiwisolver-1.0.1           <span class=\"token operator\">|</span>   py36h0a44026_0          56 KB\n    future-0.16.0              <span class=\"token operator\">|</span>           py36_2         668 KB\n    enaml-0.10.2               <span class=\"token operator\">|</span>   py36h0a44026_0         961 KB\n    ------------------------------------------------------------\n                                           Total:         6.7 MB</code></pre>\n      </div>\n<p>Congrats! You now have enmal installed on your conda environment.</p>\n<br>\n<h2>Folder Structure</h2>\n<p>First create a new folder. And then add initial files using <code class=\"language-text\">touch</code> and <code class=\"language-text\">mkdir</code> commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">mkdir</span> dyn_container_enaml\n<span class=\"token operator\">></span> <span class=\"token function\">cd</span> dyn_container_enaml\n<span class=\"token operator\">></span> <span class=\"token function\">touch</span> main.py\n<span class=\"token punctuation\">..</span>.</code></pre>\n      </div>\n<p>After completion, the folder structure would looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> tree dyn_container_enaml/\ndyn_container_enaml/\n├── main.py\n└── src/\n    ├── app_layout.enaml\n    ├── app_model.py\n    ├── container_one/\n    │   ├── container_one_layout.enaml\n    │   └── container_one_model.py\n    └── container_two/\n        ├── container_two_layout.enaml\n        └── container_two_model.py\n\n3 directories, 7 files</code></pre>\n      </div>\n<p>*Note <code class=\"language-text\">tree</code> is a bash command which can be installed using homebrew package for mac os.\n<code class=\"language-text\">brew install tree</code></p>\n<br>\n<h2>Hello, Enaml!</h2>\n<p>The code in these files is where python will spin off the enaml application.\nSo lets get started with some coding!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># main.py</span>\n\n<span class=\"token keyword\">import</span> enaml\n<span class=\"token keyword\">import</span> traceback\n<span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>app_model <span class=\"token keyword\">import</span> AppMain\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>qt<span class=\"token punctuation\">.</span>qt_application <span class=\"token keyword\">import</span> QtApplication\n\n<span class=\"token comment\"># enaml.imports is a gateway to import enaml files as they</span>\n<span class=\"token comment\"># are not part of python. Enaml is a superset of python.</span>\n<span class=\"token keyword\">with</span> enaml<span class=\"token punctuation\">.</span>imports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>app_layout <span class=\"token keyword\">import</span> App\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># create a Qt application</span>\n    app <span class=\"token operator\">=</span> QtApplication<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># define a new view for enaml object</span>\n    view <span class=\"token operator\">=</span> App\n\n    <span class=\"token comment\"># set the attribute of enaml object to a python object</span>\n    App<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> AppMain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># initialize the enaml view and call show</span>\n    view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># then start the Qt Application</span>\n    app<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_layout.enaml</span>\n\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>widgets<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Window<span class=\"token punctuation\">,</span> Container<span class=\"token punctuation\">,</span> Label\n\n<span class=\"token comment\"># create a new enaml Window object</span>\nenamldef App<span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># create an attribute model which gets set in main.py</span>\n    <span class=\"token comment\"># Note: the model can also be instantiated here after</span>\n    <span class=\"token comment\"># import of the python object.</span>\n    attr model\n    <span class=\"token comment\"># attr model = AppMain() # import app_model</span>\n    \n    <span class=\"token comment\"># container has a label with the message</span>\n    Container<span class=\"token punctuation\">:</span>\n        Label<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, Enaml!\"</span></code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_model.py</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppMain</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre>\n      </div>\n<p>Here is what the output of the app looks like thus far!</p>\n<center><img src=\"../static/hello_enaml-672d77c5a00a2edc9d74e253e487cd78.png\" height=\"200px\"></center>\n<h2>Adding ComboBox in UI</h2>\n<p>Time to add some combo boxes so that we can switch between different containers. Lets start by importing ComboBox widget in enaml and adding it to the container. Next we will change the python object to be that of Atom and then add some other properties which are refrenced in enaml layout. See the code below for more details.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_layout.enaml</span>\n\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>widgets<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Window<span class=\"token punctuation\">,</span> Container<span class=\"token punctuation\">,</span> Label<span class=\"token punctuation\">,</span> ComboBox\n\n<span class=\"token comment\"># create a new enaml Window object</span>\nenamldef App<span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># create an attribute model which gets set in main.py</span>\n    <span class=\"token comment\"># Note: the model can also be instantiated here after</span>\n    <span class=\"token comment\"># import of the python object.</span>\n    attr model\n    <span class=\"token comment\"># attr model = AppMain() # import app_model</span>\n    \n    Container<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># container has a label with a title getting set from</span>\n        <span class=\"token comment\"># model property</span>\n        Label<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">&lt;&lt;</span> model<span class=\"token punctuation\">.</span>title\n\n        <span class=\"token comment\"># container has a combo box to switch containers for </span>\n        <span class=\"token comment\"># different modules. Note: the '&lt;&lt;' which implies the</span>\n        <span class=\"token comment\"># model has a property called containers which is</span>\n        <span class=\"token comment\"># getting set.</span>\n        ComboBox<span class=\"token punctuation\">:</span>\n            items <span class=\"token operator\">&lt;&lt;</span> model<span class=\"token punctuation\">.</span>containers</code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_model.py</span>\n\n<span class=\"token keyword\">from</span> atom<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Atom<span class=\"token punctuation\">,</span> Value\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppMain</span><span class=\"token punctuation\">(</span>Atom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># property has a CAtom object of Value as it is needed</span>\n    <span class=\"token comment\"># to work with enaml superset</span>\n    title <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token string\">'Dynamic Container Example'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># containes are defined here as None</span>\n    containers <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># when the object is initialized, the value for </span>\n        <span class=\"token comment\"># containers is set</span>\n        self<span class=\"token punctuation\">.</span>containers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Container One'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Container Two'</span><span class=\"token punctuation\">]</span></code></pre>\n      </div>\n<p>After these edits, the app looks something like this. Progress!</p>\n<center><img src=\"/static/app_with_combobox-eb114df2de3e6f6dec4d9628a6b67dcf.png\"></center>\n<br>\n<h2>Enaml Include other Container Models/Layouts</h2>\n<p>At this point, we want to make it such that when we select an item from the dropdown, we render a different container in the bottom. This is possible due to enaml <code class=\"language-text\">include</code> code api. It lets us remove/add widgets dynamically through python code. Final mile!</p>\n<p>Lets start by adding something for each model (One and Two) including the layouts.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># container_one_layout.enaml</span>\n\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>widgets<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Container<span class=\"token punctuation\">,</span> Label\n\nenamldef ContainerOneLayout<span class=\"token punctuation\">(</span>Container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># create an attribute model which gets set through code</span>\n    attr model\n    \n    Container<span class=\"token punctuation\">:</span>\n        Label<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">&lt;&lt;</span> model<span class=\"token punctuation\">.</span>title\n        Label<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">=</span> <span class=\"token string\">'This is a random text for container one'</span></code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># container_one_model.py</span>\n\n<span class=\"token keyword\">from</span> atom<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Atom<span class=\"token punctuation\">,</span> Value\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ContainerOne</span><span class=\"token punctuation\">(</span>Atom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> <span class=\"token string\">'Container One'</span></code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># container_two_layout.enaml</span>\n\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>widgets<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Container<span class=\"token punctuation\">,</span> Label\n\nenamldef ContainerTwoLayout<span class=\"token punctuation\">(</span>Container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># create an attribute model which gets set through code</span>\n    attr model\n    \n    Container<span class=\"token punctuation\">:</span>\n        Label<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">&lt;&lt;</span> model<span class=\"token punctuation\">.</span>title\n        Label<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">=</span> <span class=\"token string\">'Adding some random text for container two'</span></code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># container_two_model.py</span>\n\n<span class=\"token keyword\">from</span> atom<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Atom<span class=\"token punctuation\">,</span> Value\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ContainerTwo</span><span class=\"token punctuation\">(</span>Atom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> <span class=\"token string\">'Container Two'</span>\n    </code></pre>\n      </div>\n<p>Next up, lets add in the locations of the containers and models in the app_model.py and refrence the keys of the model layout as a list to the containers. From here when a user selects a value from the dropdown, we will render a different layout and model, respectively.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_model.py</span>\n\n<span class=\"token keyword\">from</span> atom<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Atom<span class=\"token punctuation\">,</span> Value\n\n<span class=\"token comment\"># import all container models</span>\n<span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>container_one<span class=\"token punctuation\">.</span>container_one_model <span class=\"token keyword\">import</span> ContainerOne\n<span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>container_two<span class=\"token punctuation\">.</span>container_two_model <span class=\"token keyword\">import</span> ContainerTwo\n\n<span class=\"token comment\"># import all container layouts</span>\n<span class=\"token keyword\">import</span> enaml\n<span class=\"token keyword\">with</span> enaml<span class=\"token punctuation\">.</span>imports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>container_one<span class=\"token punctuation\">.</span>container_one_layout <span class=\"token keyword\">import</span> ContainerOneLayout\n    <span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>container_two<span class=\"token punctuation\">.</span>container_two_layout <span class=\"token keyword\">import</span> ContainerTwoLayout\n\n\n<span class=\"token comment\"># create a new list which represents the objects for model and layout</span>\nMODEL_LAYOUTS <span class=\"token operator\">=</span> \\\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'Container One'</span><span class=\"token punctuation\">:</span> \\\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'model'</span>     <span class=\"token punctuation\">:</span> ContainerOne<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'layout'</span>    <span class=\"token punctuation\">:</span> ContainerOneLayout\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Container Two'</span><span class=\"token punctuation\">:</span> \\\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'model'</span>     <span class=\"token punctuation\">:</span> ContainerTwo<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'layout'</span>    <span class=\"token punctuation\">:</span> ContainerTwoLayout\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppMain</span><span class=\"token punctuation\">(</span>Atom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># property has a CAtom object of Value as it is needed</span>\n    <span class=\"token comment\"># to work with enaml superset</span>\n    title <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token string\">'Dynamic Container Example'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># containes are defined here as None</span>\n    containers <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># container to render once an item is selected through</span>\n    <span class=\"token comment\"># the dropdown</span>\n    selectedContainer <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># when the object is initialized, the value for </span>\n        <span class=\"token comment\"># containers is set. In this case, the value </span>\n        <span class=\"token comment\"># consists of keys rendered from the model layout</span>\n        <span class=\"token comment\"># dictionary</span>\n        self<span class=\"token punctuation\">.</span>containers <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>MODEL_LAYOUTS<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">renderContainer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span></code></pre>\n      </div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_layout.enaml</span>\n\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Include\n<span class=\"token keyword\">from</span> enaml<span class=\"token punctuation\">.</span>widgets<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Window<span class=\"token punctuation\">,</span> Container<span class=\"token punctuation\">,</span> Label<span class=\"token punctuation\">,</span> ComboBox\n\n<span class=\"token comment\"># create a new enaml Window object</span>\nenamldef App<span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># create an attribute model which gets set in main.py</span>\n    <span class=\"token comment\"># Note: the model can also be instantiated here after</span>\n    <span class=\"token comment\"># import of the python object.</span>\n    attr model\n    <span class=\"token comment\"># attr model = AppMain() # import app_model</span>\n    \n    Container<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># container has a label with a title getting set from</span>\n        <span class=\"token comment\"># model property</span>\n        Label<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">&lt;&lt;</span> model<span class=\"token punctuation\">.</span>title\n\n        <span class=\"token comment\"># container has a combo box to switch containers for </span>\n        <span class=\"token comment\"># different modules. Note: the '&lt;&lt;' which implies the</span>\n        <span class=\"token comment\"># model has a property called containers which is</span>\n        <span class=\"token comment\"># getting set.</span>\n        <span class=\"token comment\"># Note: dropdown is given as a name for this ComboBox</span>\n        <span class=\"token comment\"># so that it can be refrenced later.</span>\n        ComboBox<span class=\"token punctuation\">:</span> dropdown<span class=\"token punctuation\">:</span>\n            items <span class=\"token operator\">&lt;&lt;</span> model<span class=\"token punctuation\">.</span>containers\n\n            <span class=\"token comment\"># selected_item is a propery of ComboBox which returns</span>\n            <span class=\"token comment\"># the selected item. The '::' implied notification which</span>\n            <span class=\"token comment\"># can be used to execute python code and call a function</span>\n            <span class=\"token comment\"># on the model property.</span>\n            selected_item <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dropdown<span class=\"token punctuation\">.</span>selected_item<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># this function will render a different container</span>\n                <span class=\"token comment\"># on UI by calling the model's function</span>\n                model<span class=\"token punctuation\">.</span>renderContainer<span class=\"token punctuation\">(</span>dropdown<span class=\"token punctuation\">.</span>selected_item<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Include is the core api widget that lets applications</span>\n        <span class=\"token comment\"># define the objets being added/removed dynamically</span>\n        <span class=\"token comment\"># through python. The objects which is a list is </span>\n        <span class=\"token comment\"># currently pointing to selectedContainer in model.</span>\n        Include<span class=\"token punctuation\">:</span> dynamicContainers<span class=\"token punctuation\">:</span>\n            objects <span class=\"token operator\">&lt;&lt;</span> model<span class=\"token punctuation\">.</span>selectedContainer</code></pre>\n      </div>\n<p>Final touches...implementing the <code class=\"language-text\">renderContainer</code> function</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app_model.py</span>\n\n<span class=\"token keyword\">from</span> atom<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> Atom<span class=\"token punctuation\">,</span> Value\n<span class=\"token keyword\">import</span> traceback\n\n<span class=\"token comment\"># import all container models</span>\n<span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>container_one<span class=\"token punctuation\">.</span>container_one_model <span class=\"token keyword\">import</span> ContainerOne\n<span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>container_two<span class=\"token punctuation\">.</span>container_two_model <span class=\"token keyword\">import</span> ContainerTwo\n\n<span class=\"token comment\"># import all container layouts</span>\n<span class=\"token keyword\">import</span> enaml\n<span class=\"token keyword\">with</span> enaml<span class=\"token punctuation\">.</span>imports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>container_one<span class=\"token punctuation\">.</span>container_one_layout <span class=\"token keyword\">import</span> ContainerOneLayout\n    <span class=\"token keyword\">from</span> src<span class=\"token punctuation\">.</span>container_two<span class=\"token punctuation\">.</span>container_two_layout <span class=\"token keyword\">import</span> ContainerTwoLayout\n\n\n<span class=\"token comment\"># create a new list which represents the objects for model and layout</span>\nMODEL_LAYOUTS <span class=\"token operator\">=</span> \\\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'Container One'</span><span class=\"token punctuation\">:</span> \\\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'model'</span>     <span class=\"token punctuation\">:</span> ContainerOne<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'layout'</span>    <span class=\"token punctuation\">:</span> ContainerOneLayout\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Container Two'</span><span class=\"token punctuation\">:</span> \\\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'model'</span>     <span class=\"token punctuation\">:</span> ContainerTwo<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'layout'</span>    <span class=\"token punctuation\">:</span> ContainerTwoLayout\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppMain</span><span class=\"token punctuation\">(</span>Atom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># property has a CAtom object of Value as it is needed</span>\n    <span class=\"token comment\"># to work with enaml superset</span>\n    title <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token string\">'Dynamic Container Example'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># containes are defined here as None</span>\n    containers <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># container to render once an item is selected through</span>\n    <span class=\"token comment\"># the dropdown</span>\n    selectedContainer <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># when the object is initialized, the value for </span>\n        <span class=\"token comment\"># containers is set. In this case, the value </span>\n        <span class=\"token comment\"># consists of keys rendered from the model layout</span>\n        <span class=\"token comment\"># dictionary</span>\n        self<span class=\"token punctuation\">.</span>containers <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>MODEL_LAYOUTS<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">renderContainer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Render a container for the given key\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>selectedContainer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> key <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> MODEL_LAYOUTS<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>selectedContainer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> MODEL_LAYOUTS<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># get the layout</span>\n                container <span class=\"token operator\">=</span> MODEL_LAYOUTS<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'layout'</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># set the model attr of layout to the model</span>\n                container<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> MODEL_LAYOUTS<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># set the selected container to the container and</span>\n                <span class=\"token comment\"># initialize the layout</span>\n                self<span class=\"token punctuation\">.</span>selectedContainer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>container<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<br>\n<h2>Final Results</h2>\n<p>Both the containers are rendered as a selection is made on the UI. Images Below.</p>\n<center>\nContainer One\n<img src=\"../static/container_one_render-ef871fa40a2e7911301ed31d34130683.png\">\n<p>Container Two\n<img src=\"\"></p>\n</center>","frontmatter":{"title":"Building an Enaml App with Dynamic Containers","tags":"enaml, python, dynamic containers, desktop app"}}},"pageContext":{"slug":"/dynamic_container_with_enaml/"}}